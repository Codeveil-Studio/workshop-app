import React, { useState } from "react";
import { Search, Filter, Download } from "lucide-react";

export default function Orders({ workOrders, setWorkOrders, selectedWorkOrder, setSelectedWorkOrder, userEmail }) {
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");

  // Filter work orders based on search and status
  const filteredOrders = workOrders.filter(order => {
    const matchesSearch = !searchQuery || 
      order.make.toLowerCase().includes(searchQuery.toLowerCase()) ||
      order.model.toLowerCase().includes(searchQuery.toLowerCase()) ||
      order.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      String(order.id).includes(searchQuery);
    
    const matchesStatus = statusFilter === "all" || order.status.toLowerCase() === statusFilter.toLowerCase();
    
    return matchesSearch && matchesStatus;
  });

  const handleStatusChange = (orderId, newStatus) => {
    setWorkOrders(prev => 
      prev.map(order => 
        order.id === orderId ? { ...order, status: newStatus } : order
      )
    );
  };

  const handleDeleteOrder = (orderId) => {
    if (window.confirm("Are you sure you want to delete this work order?")) {
      setWorkOrders(prev => prev.filter(order => order.id !== orderId));
      if (selectedWorkOrder?.id === orderId) {
        setSelectedWorkOrder(null);
      }
    }
  };

  const downloadInvoice = (order) => {
    // Build basic HTML invoice (matching WorkOrdersList format)
    const total = (order.items || []).reduce((acc, it) => acc + (Number(it.price) || 0) * (Number(it.qty) || 1), 0);
    const html = `<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>Invoice - ${order.id}</title>
  <style>
    body { font-family: Inter, Roboto, Arial, sans-serif; padding:20px; color:#111 }
    h1 { color:#29cc6a }
    table { width:100%; border-collapse: collapse; margin-top:20px }
    th, td { text-align:left; padding:8px; border-bottom:1px solid #ddd }
    .total { font-weight:700; font-size:1.1rem; }
  </style>
</head>
<body>
  <h1>Invoice - ${order.id}</h1>
  <p><strong>Customer:</strong> ${order.customerName} • ${order.phone}</p>
  <p><strong>Vehicle:</strong> ${order.make} ${order.model} (${order.year}) • VIN: ${order.vin}</p>
  <p><strong>Date:</strong> ${order.date}</p>
  <table>
    <thead><tr><th>Description</th><th>Qty</th><th>Price</th><th>Amount</th></tr></thead>
    <tbody>
      ${(order.items || [])
        .map(
          (it) =>
            `<tr><td>${it.desc}</td><td>${it.qty}</td><td>$${Number(it.price).toFixed(2)}</td><td>$${(
              (Number(it.price) || 0) *
              (Number(it.qty) || 1)
            ).toFixed(2)}</td></tr>`
        )
        .join("")}
    </tbody>
  </table>
  <p class="total">Total: $${Number(total).toFixed(2)}</p>
  <p>Generated by Contractor Dashboard</p>
</body>
</html>`;
    const blob = new Blob([html], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `invoice_${order.id}.html`;
    document.body.appendChild(link);
    link.click();
    link.remove();
    URL.revokeObjectURL(url);
  };

  const yours = filteredOrders.filter(o => (o.created_by || '').toLowerCase() === (userEmail || '').toLowerCase());
  const others = filteredOrders.filter(o => (o.created_by || '').toLowerCase() !== (userEmail || '').toLowerCase());
  // Technicians Note: orders created by you, accepted by a technician, with a non-empty temp_supply_item
  const technicianNotes = yours.filter(o => (o.accepted_by || '').toString().trim() !== '' && (o.temp_supply_item || '').toString().trim() !== '');

  // Helpers for status logic
  const normalizeStatus = (s) => {
    const str = String(s || '').toLowerCase().trim();
    if (str === 'in progress' || str === 'in-progress' || str === 'in_progress' || str === 'accepted') return 'in_progress';
    if (str === 'open') return 'open';
    if (str === 'completed') return 'completed';
    if (str === 'cancelled' || str === 'canceled') return 'cancelled';
    if (str === 'requested') return 'requested';
    if (str === 'pending') return 'pending';
    return str || 'requested';
  };
  const isEditableStatus = (order) => normalizeStatus(order.status) === 'in_progress';
  const getStatusClass = (status) => {
    const s = normalizeStatus(status);
    if (s === 'open' || s === 'requested') return 'bg-blue-100 text-blue-800';
    if (s === 'in_progress') return 'bg-yellow-100 text-yellow-800';
    if (s === 'completed') return 'bg-green-100 text-green-800';
    if (s === 'cancelled') return 'bg-red-100 text-red-800';
    if (s === 'pending') return 'bg-gray-100 text-gray-800';
    return 'bg-gray-100 text-gray-800';
  };

  // Details panel state
  const [details, setDetails] = useState(null);
  const [detailsLoading, setDetailsLoading] = useState(false);
  const [detailsError, setDetailsError] = useState('');

  // Assign Supplier modal state
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [assignSupplyItem, setAssignSupplyItem] = useState('');
  const [assignDescription, setAssignDescription] = useState('');
  const [assignError, setAssignError] = useState('');

  const openAssignModal = () => {
    setAssignError('');
    setShowAssignModal(true);
  };
  const closeAssignModal = () => {
    setShowAssignModal(false);
    setAssignSupplyItem('');
    setAssignDescription('');
    setAssignError('');
  };
  const sendToSupplier = () => {
    const item = assignSupplyItem.trim();
    if (!item) {
      setAssignError('Supply Item is required');
      return;
    }
    // Call backend to update supplier fields
    const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';
    const base = (API_URL || '').replace(/\/+$/, '');
    const path = /\/api\/?$/.test(base)
      ? `${base}/work-orders/${(selectedWorkOrder || {}).id}/supplier`
      : `${base}/api/work-orders/${(selectedWorkOrder || {}).id}/supplier`;
    const payload = { supply_item: item, item_description: assignDescription || null };
    fetch(path, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
      .then(async (res) => {
        const data = await res.json().catch(() => ({}));
        if (!res.ok || !data.success) {
          throw new Error(data.error || res.statusText);
        }
        // Update local selectedWorkOrder and workOrders list for immediate UI feedback
        const orderId = (selectedWorkOrder || {}).id;
        setWorkOrders((prev) => prev.map((o) => (o.id === orderId ? { ...o, supply_item: item, item_description: assignDescription || null } : o)));
        setSelectedWorkOrder((prev) => (prev ? { ...prev, supply_item: item, item_description: assignDescription || null } : prev));
        setDetails((prev) => (prev ? { ...prev, order: { ...prev.order, supply_item: item, item_description: assignDescription || null } } : prev));
        closeAssignModal();
      })
      .catch((e) => {
        setAssignError(e.message || 'Failed to update supplier assignment');
      });
  };

  const viewDetails = async (order) => {
    try {
      const isOther = String(order.created_by || '').toLowerCase() !== String(userEmail || '').toLowerCase();
      // If order belongs to other contractors, do not select it for preview
      setSelectedWorkOrder(isOther ? null : order);
      setDetailsLoading(true);
      setDetailsError('');
      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';
      const base = (API_URL || '').replace(/\/+$/, '');
      const path = /\/api\/?$/.test(base) ? `${base}/work-orders/${order.id}` : `${base}/api/work-orders/${order.id}`;
      const res = await fetch(path);
      const contentType = res.headers.get('content-type') || '';
      const isJson = contentType.includes('application/json');
      const data = isJson ? await res.json() : null;
      if (!res.ok || !data?.success) {
        setDetailsError(data?.error || res.statusText);
        setDetails(null);
      } else {
        setDetails(data);
      }
    } catch (e) {
      setDetailsError(e.message);
      setDetails(null);
    } finally {
      setDetailsLoading(false);
    }
  };

  // Confirm technician referral: copy temp fields to permanent, clear temp
  const confirmReferral = async (orderId) => {
    try {
      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';
      const base = (API_URL || '').replace(/\/+$/, '');
      const path = /\/api\/?$/.test(base)
        ? `${base}/work-orders/${orderId}/refer-confirm`
        : `${base}/api/work-orders/${orderId}/refer-confirm`;
      const res = await fetch(path, { method: 'PUT' });
      const contentType = res.headers.get('content-type') || '';
      const isJson = contentType.includes('application/json');
      const data = isJson ? await res.json() : null;
      if (!res.ok || !data?.success) {
        throw new Error(data?.error || res.statusText);
      }
      // Update local state
      setWorkOrders(prev => prev.map(o => {
        if (o.id === orderId) {
          const newSupplyItem = o.temp_supply_item || null;
          const newItemDesc = o.temp_desc || null;
          return {
            ...o,
            supply_item: newSupplyItem,
            item_description: newItemDesc,
            temp_supply_item: null,
            temp_desc: null,
          };
        }
        return o;
      }));
      if (selectedWorkOrder?.id === orderId) {
        setSelectedWorkOrder(prev => prev ? {
          ...prev,
          supply_item: prev.temp_supply_item || null,
          item_description: prev.temp_desc || null,
          temp_supply_item: null,
          temp_desc: null,
        } : prev);
      }
    } catch (e) {
      alert(e.message || 'Failed to confirm referral');
    }
  };

  // Decline technician referral: clear temp fields after confirmation
  const declineReferral = async (orderId) => {
    const ok = window.confirm('Are you sure you want to decline this technician referral?');
    if (!ok) return;
    try {
      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';
      const base = (API_URL || '').replace(/\/+$/, '');
      const path = /\/api\/?$/.test(base)
        ? `${base}/work-orders/${orderId}/refer-decline`
        : `${base}/api/work-orders/${orderId}/refer-decline`;
      const res = await fetch(path, { method: 'PUT' });
      const contentType = res.headers.get('content-type') || '';
      const isJson = contentType.includes('application/json');
      const data = isJson ? await res.json() : null;
      if (!res.ok || !data?.success) {
        throw new Error(data?.error || res.statusText);
      }
      // Update local state
      setWorkOrders(prev => prev.map(o => (o.id === orderId ? { ...o, temp_supply_item: null, temp_desc: null } : o)));
      if (selectedWorkOrder?.id === orderId) {
        setSelectedWorkOrder(prev => prev ? { ...prev, temp_supply_item: null, temp_desc: null } : prev);
      }
    } catch (e) {
      alert(e.message || 'Failed to decline referral');
    }
  };

  const renderTable = (orders, emptyLabel, allowStatusChange) => (
    <div className="overflow-x-auto mb-8">
      <table className="w-full">
        <thead>
          <tr className="border-b border-gray-200">
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Order ID</th>
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Customer</th>
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Vehicle</th>
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Date</th>
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Total</th>
            <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
          </tr>
        </thead>
        <tbody>
          {orders.map((order) => {
            const totalItemsAmount = Array.isArray(order.items) && order.items.length > 0
              ? order.items.reduce((sum, item) => sum + (item.qty * item.price), 0)
              : null;
            const total = totalItemsAmount !== null ? totalItemsAmount : Number(order.total || 0);
            const isSelected = selectedWorkOrder?.id === order.id;

            return (
              <tr 
                key={order.id} 
                className={`border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${isSelected ? 'bg-green-50 border-green-200' : ''}`}
                onClick={() => {
                  // Prevent preview selection for 'Created by Other Contractors'
                  if (allowStatusChange) setSelectedWorkOrder(order); else setSelectedWorkOrder(null);
                }}
              >
                <td className="py-4 px-4 font-medium">#{order.id}</td>
                <td className="py-4 px-4">
                  <div>
                    <div className="font-medium">{order.customerName}</div>
                    <div className="text-sm text-gray-500">{order.phone}</div>
                  </div>
                </td>
                <td className="py-4 px-4">
                  <div>
                    <div className="font-medium">{order.make} {order.model}</div>
                    <div className="text-sm text-gray-500">{order.year}</div>
                  </div>
                </td>
                <td className="py-4 px-4 text-sm text-gray-600">{order.date}</td>
                <td className="py-4 px-4">
                  {allowStatusChange && isEditableStatus(order) ? (
                    <select
                      value={order.status}
                      onChange={(e) => {
                        e.stopPropagation();
                        handleStatusChange(order.id, e.target.value);
                      }}
                      className={`px-3 py-1 rounded-full text-xs font-medium border-0 focus:ring-2 focus:ring-green-500 ${getStatusClass(order.status)}`}
                    >
                      <option value="Completed">Completed</option>
                      <option value="Cancelled">Cancelled</option>
                    </select>
                  ) : (
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusClass(order.status)}`}>
                      {order.status}
                    </span>
                  )}
                </td>
                <td className="py-4 px-4 font-medium">${total.toFixed(2)}</td>
                <td className="py-4 px-4">
                  <div className="flex items-center gap-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        downloadInvoice(order);
                      }}
                      className="p-1 text-gray-500 hover:text-green-600 transition-colors cursor-pointer"
                      title="Download Invoice"
                    >
                      <Download size={16} />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        viewDetails(order);
                      }}
                      className="px-2 py-1 text-sm rounded-md bg-blue-50 text-blue-700 hover:bg-blue-100 transition-colors cursor-pointer"
                      title="View Details"
                    >
                      Details
                    </button>
                  </div>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
      {orders.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          <div className="text-lg font-medium mb-2">{emptyLabel}</div>
        </div>
      )}
    </div>
  );

  return (
    <div className="bg-white p-6 rounded-xl shadow">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold mb-2">Work Orders</h3>
          <div className="text-sm text-gray-500">{filteredOrders.length} of {workOrders.length} orders</div>
        </div>
        
        <div className="flex items-center gap-3">
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Search orders..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            />
          </div>
          
          {/* Status Filter */}
          <div className="relative">
            <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent appearance-none bg-white"
            >
              <option value="all">All Status</option>
              <option value="open">Open</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
        </div>
      </div>

      {/* Created by You */}
      <h4 className="text-md font-semibold mb-3">Created by You</h4>
      {renderTable(yours, 'No work orders created by you', true)}

      {/* Created by Other Contractors */}
      <h4 className="text-md font-semibold mb-3">Created by Other Contractors</h4>
      {renderTable(others, 'No work orders created by other contractors', false)}

      {/* Technicians Note */}
      <h4 className="text-md font-semibold mb-3">Technicians Note</h4>
      <div className="overflow-x-auto mb-8">
        <table className="w-full">
          <thead>
            <tr className="border-b border-gray-200">
              <th className="text-left py-3 px-4 font-semibold text-gray-700">Order ID</th>
              <th className="text-left py-3 px-4 font-semibold text-gray-700">Accepted By</th>
              <th className="text-left py-3 px-4 font-semibold text-gray-700">Supply Item</th>
              <th className="text-left py-3 px-4 font-semibold text-gray-700">Item Description</th>
              <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
            </tr>
          </thead>
          <tbody>
            {technicianNotes.map((o) => (
              <tr key={o.id} className="border-b border-gray-100">
                <td className="py-4 px-4 font-medium">#{o.id}</td>
                <td className="py-4 px-4">{o.accepted_by || '—'}</td>
                <td className="py-4 px-4">{o.temp_supply_item || '—'}</td>
                <td className="py-4 px-4">{o.temp_desc || '—'}</td>
                <td className="py-4 px-4">
                  {o.supply_item ? (
                    <span className="px-2 py-1 text-sm rounded-md bg-green-100 text-green-700 border border-green-200">Accepted</span>
                  ) : (
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => confirmReferral(o.id)}
                        className="px-2 py-1 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 cursor-pointer"
                      >
                        Confirm
                      </button>
                      <button
                        onClick={() => declineReferral(o.id)}
                        className="px-2 py-1 text-sm rounded-md bg-red-600 text-white hover:bg-red-700 cursor-pointer"
                      >
                        Decline
                      </button>
                    </div>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {technicianNotes.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <div className="text-lg font-medium mb-2">No requests from technicians</div>
          </div>
        )}
      </div>

      {workOrders.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          <div className="text-lg font-medium mb-2">No work orders created yet</div>
        </div>
      )}
      {(selectedWorkOrder || details) && (
        <div className="mt-8 border rounded-lg p-4 bg-gray-50">
          <div className="flex justify-between items-center mb-4">
            <h5 className="text-md font-semibold">Work Order Details</h5>
            {detailsLoading && <span className="text-sm text-gray-500">Loading details...</span>}
            {detailsError && <span className="text-sm text-red-600">{detailsError}</span>}
            {(((selectedWorkOrder || {}).created_by || '').toLowerCase() === (userEmail || '').toLowerCase()) && (
              ((details?.order?.supply_item || (selectedWorkOrder || {}).supply_item) ? (
                <span className="px-3 py-1 text-sm rounded-md bg-green-100 text-green-700 border border-green-200">Supplier Assigned</span>
              ) : (
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    openAssignModal();
                  }}
                  className="px-3 py-1 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 cursor-pointer"
                  title="Assign Supplier"
                >
                  Send to Supplier
                </button>
              ))
            )}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div className="text-sm text-gray-500">Order ID</div>
              <div className="font-medium">#{(selectedWorkOrder || {}).id}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Status</div>
              <div className={`inline-block px-3 py-1 rounded-full text-xs font-medium ${getStatusClass((selectedWorkOrder || {}).status)}`}>
                {(selectedWorkOrder || {}).status}
              </div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Created By</div>
              <div className="font-medium">{(selectedWorkOrder || {}).created_by || '—'}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Accepted By</div>
              <div className="font-medium">{details?.order?.accepted_by || 'Not accepted'}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Supplier Accepted By</div>
              <div className="font-medium">{details?.order?.supplier_email || 'Not accepted'}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Customer</div>
              <div className="font-medium">{(selectedWorkOrder || {}).customerName} {(selectedWorkOrder || {}).phone ? `(${(selectedWorkOrder || {}).phone})` : ''}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Vehicle</div>
              <div className="font-medium">{(selectedWorkOrder || {}).year} {(selectedWorkOrder || {}).make} {(selectedWorkOrder || {}).model}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">VIN</div>
              <div className="font-medium">{(selectedWorkOrder || {}).vin || '—'}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Date</div>
              <div className="font-medium">{(selectedWorkOrder || {}).date || '—'}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Total</div>
              <div className="font-medium">${(selectedWorkOrder || {}).total ? Number((selectedWorkOrder || {}).total).toFixed(2) : '0.00'}</div>
            </div>
          </div>

          {Array.isArray(details?.items) && details.items.length > 0 && (
            <div className="mt-6">
              <div className="text-sm font-semibold mb-2">Items</div>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b border-gray-200">
                      <th className="text-left py-2 px-3">Title</th>
                      <th className="text-left py-2 px-3">Qty</th>
                      <th className="text-left py-2 px-3">Price</th>
                    </tr>
                  </thead>
                  <tbody>
                    {details.items.map((it, idx) => (
                      <tr key={idx} className="border-b border-gray-100">
                        <td className="py-2 px-3">{it.title || it.name || it.description || 'Item'}</td>
                        <td className="py-2 px-3">{it.qty}</td>
                        <td className="py-2 px-3">${Number((it?.price ?? it?.unit_price ?? 0)).toFixed(2)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {Array.isArray(details?.work_types) && details.work_types.length > 0 && (
            <div className="mt-6">
              <div className="text-sm font-semibold mb-2">Work Types</div>
              <div className="flex flex-wrap gap-2">
                {details.work_types.map((wt, idx) => (
                  <span key={idx} className="px-3 py-1 rounded-full bg-gray-200 text-gray-700 text-xs">{wt.type || wt.name || 'Type'}</span>
                ))}
              </div>
            </div>
          )}

          {Array.isArray(details?.photos) && details.photos.length > 0 && (
            <div className="mt-6">
              <div className="text-sm font-semibold mb-2">Photos</div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {details.photos.map((ph, idx) => (
                  <img key={idx} src={ph.url || ph.image_url || ph.path} alt="photo" className="w-full h-24 object-cover rounded" />
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Assign Supplier Modal */}
      {showAssignModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Backdrop */}
          <div className="absolute inset-0 bg-black/40" onClick={closeAssignModal} />
          {/* Modal */}
          <div className="relative bg-white rounded-2xl shadow-2xl w-full max-w-lg md:max-w-2xl mx-4 sm:mx-6">
            <div className="p-4 bg-[#29cc6a] text-white rounded-t-2xl flex items-center justify-between">
              <h6 className="text-lg font-semibold">Assign Supplier</h6>
              <button
                className="text-sm text-white/90 hover:text-white bg-white/10 px-2 py-1 rounded cursor-pointer"
                onClick={closeAssignModal}
              >
                Close
              </button>
            </div>
            <div className="p-4 max-h-[80vh] overflow-y-auto">
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Supply Item <span className="text-red-500">*</span></label>
                <input
                  type="text"
                  value={assignSupplyItem}
                  onChange={(e) => setAssignSupplyItem(e.target.value)}
                  placeholder="Enter supply item"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
                {assignError && (
                  <div className="mt-1 text-sm text-red-600">{assignError}</div>
                )}
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Item Description</label>
                <textarea
                  value={assignDescription}
                  onChange={(e) => setAssignDescription(e.target.value)}
                  placeholder="Optional description"
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>
            </div>
            <div className="p-4 border-t border-gray-200 flex items-center justify-end gap-2 rounded-b-2xl">
              <button
                className="px-3 py-2 text-sm rounded-md bg-gray-100 text-gray-800 hover:bg-gray-200 cursor-pointer"
                onClick={closeAssignModal}
              >
                Cancel
              </button>
              <button
                className="px-3 py-2 text-sm rounded-md bg-green-600 text-white hover:bg-green-700 cursor-pointer"
                onClick={sendToSupplier}
              >
                Send to Supplier
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
